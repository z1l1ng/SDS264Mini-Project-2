---
title: "MiniProject2Submission"
author: "Rain & Ziling"
sidebar: false
format:
  pdf: default
editor_options: 
  chunk_output_type: console
---

```{r}
library(tidyverse)
library(stringr)
library(rvest)
library(polite)
library(sf)
library(maps)
library(viridis)
library(leaflet)
library(htmltools)
library(janitor)
library(httr2)
library(httr)
library(lubridate)
library(tidycensus)
library(purrr)
```

## Introduction

For our project, we decided to scrape data from the wiki pages of one of our favorite video games, *Stardew Valley*. *Stardew Valley* is a popular indie farming game that allows players to take on the role of a character who inherits a run-down farm from their grandfather. In the game, players can grow crops, raise animals, fish, mine, and engage in social activities with the towns people.

For our project, we were interested in compiling a list of items from the game that can be farmed or collected. The only way to make money from the game is by selling these items, and the price of the item depends on the quality of the item and the profession(s) of the player. Thus, our dataset includes information on the name, category, subcategory, and the different price points of the item depending on item quality (regular, silver, gold, and iridium) and player's profession.

## Approach

All of our data has been accumulated from the [*Stardew Valley* Wiki](https://stardewvalleywiki.com/Stardew_Valley_Wiki) page. Since each item in the game has a different page and not all of the pages followed a similar structure, we used a combination of harvesting the data in both table form and anywhere on the webpage using rvest with html_text. In the end, we were able to create a dataset from the more important item categories: crops, fish, animal products, and minerals.

### Crops

We start be getting a list of all the different crops in the game.

```{r}
robotstxt::paths_allowed("https://stardewvalleywiki.com/Stardew_Valley_Wiki")

session <- bow("https://stardewvalleywiki.com/Stardew_Valley_Wiki", force = TRUE)
```

```{r}
crops <- bow("https://stardewvalleywiki.com/Crops", force = TRUE)

result <- scrape(crops) |>
  html_nodes(css = "table") |>
  html_table(header = TRUE, fill = TRUE)

seasonal_crops <- result[[134]][2] #table of the season crops so we can use that list

seasonal_crops <- seasonal_crops |>
  mutate(Crops = strsplit(Crops, " â€¢ ", fixed = TRUE)) |>
  unnest(Crops) |>
  mutate(Crops = str_replace_all(Crops, " ", "_")) |>
  distinct(Crops)
```

Create our helper functions for crops:

```{r}
# function for getting the price at a given page and css selector
get_price <- function(page, css_selector) {
  page |>
  html_nodes(css_selector) |>
  html_text()
}

# function for creating a tibble of base prices, no profession, for a given crop page
crop_base_prices <- function(crop, tiller = FALSE) {
  url <- str_c("https://stardewvalleywiki.com/", crop)
  page <- read_html(url)
  
  qualities <- c("regular", "silver", "gold", "iridium")
  prices <- list()
  
  for (i in seq_along(qualities)) {
    if (tiller) {
      selector <- str_c("tr:nth-child(10) td+ td tr:nth-child(", i, ") td+ td")
    } else {
      selector <- str_c("tr:nth-child(10) tr td:nth-child(1) tr:nth-child(", i, ") td+ td")
    }
    price <- get_price(page, selector)
    prices[[qualities[i]]] <- parse_number(price)
  }
  
  tibble(
    item = crop,
    regular_price = prices$regular,
    silver_price = prices$silver,
    gold_price = prices$gold,
    iridium_price = prices$iridium
  )
}

```

Create the tibbles for seasonal crops using the helper functions. Note that items 46 (Tea_Leaves), 44(Sweet Gem Berry), 43(Qi_Fruit), 41(Cactus_Fruit), 36(Grape), 4(Coffee_Bean) have issues when using the functions, so we will scrape the data manually without the functions.

```{r}
# List of crops, excluding those with known issues
valid_crops_list <- seasonal_crops_list[-c(46, 44, 43, 41, 36, 4)]

# Base prices without profession
base_crop_prices <- valid_crops_list |>
  purrr::map_dfr(~ crop_base_prices(.x)) |>
  mutate(profession = as.character(NA))

# Prices with Tiller profession
tiller_crop_prices <- valid_crops_list |>
  purrr::map_dfr(~ crop_base_prices(.x, tiller = TRUE)) |>
  mutate(profession = "tiller")

# Combine base and tiller crop prices
seasonal_crop_prices <- bind_rows(base_crop_prices, tiller_crop_prices)
seasonal_crop_prices
```

Do the same for non seasonal crops:

```{r}
# Non-seasonal crops list, excluding problematic items
other_crops <- c("Apple", "Blackberry", "Pomegranate", "Wild_Plum", "Apricot", 
                 "Cherry", "Spice_Berry", "Peach", "Orange", "Crystal_Fruit", 
                 "Banana", "Mango", "Fiddlehead_Fern")[-c(10, 7, 4, 2)]

# Base prices without profession
base_other_crops <- other_crops |>
  purrr::map_dfr(~ crop_base_prices(.x)) |>
  mutate(profession = as.character(NA))

# Prices with Tiller profession
tiller_other_crops <- other_crops |>
  purrr::map_dfr(~ crop_base_prices(.x, tiller = TRUE)) |>
  mutate(profession = "tiller")

# Combine base and tiller prices into one table and arrange by item
nonseasonal_crop_tbl <- bind_rows(base_other_crops, tiller_other_crops) |>
  arrange(item)
```

#Finally for the weird crops

```{r}
crop_weird_prices <- function(item, selector){
  url <- str_c("https://stardewvalleywiki.com/", item)
  page <- read_html(url)
  regular_price <- get_price(page, "tr:nth-child(10) tr td:nth-child(1) td+ td")
  
  tibble(item = item,
      regular_price = parse_number(regular_price))
}
# Tea Leaves
# Base
base_tea_leaves <- crop_weird_prices

# Base
url <- str_c("https://stardewvalleywiki.com/", "Tea_Leaves")
page <- read_html(url)
regular_price <- get_price(page, "tr:nth-child(10) tr td:nth-child(1) td+ td")
base_tea_leaves <- tibble(
      item = "Tea_Leaves",
      regular_price = parse_number(regular_price))

# Tiller
regular_price <- get_price(page, "tr:nth-child(10) td+ td td+ td")
tiller_tea_leaves <- tibble(
      item = "Tea_Leaves",
      regular_price = parse_number(regular_price),
      profession = "Tiller")

tea_leaves <-bind_rows(base_tea_leaves, tiller_tea_leaves)
tea_leaves

```

Combine all of the crop tibbles into one:

```{r}
# First chunks of crops 
draft_crops <- bind_rows(seasonal_crop_prices,
                         nonseasonal_crop_tbl) |>
  arrange(item)
```

### Fish

### Animal Products

### Minerals
