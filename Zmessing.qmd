---
title: "messing around"
author: "Ziling"
sidebar: false
format:
  pdf: default
editor_options: 
  chunk_output_type: console
---
```{r}
library(tidyverse)
library(stringr)
library(rvest)
library(polite)
library(sf)
library(maps)
library(viridis)
library(leaflet)
library(htmltools)
library(janitor)
library(httr2)
library(httr)
library(lubridate)
library(tidycensus)
library(purrr)
library(raster)
library(sf)
```

```{r}
stardew_items <- read_csv("stardew_items.csv")
seed_deets <- read_csv("seed_deets.csv")
```

```{r}
fullcrops <- stardew_items |>
  select(-1) |>
  left_join(seed_deets |>
  select(-1)) |>
  filter(category == "crop")
```

```{r}
#dont look
tester <- fullcrops |>
  mutate(
    item_profession = str_c(item, "_" , profession),
    # dollar per day
    regular_dpd = regular_price/growth_time,
    silver_dpd = silver_price/growth_time,
    gold_dpd = gold_price/growth_time,
    iridium_dpd = iridium_price/growth_time,
    # general profit
    regular_gp = regular_price - general_store,
    silver_gp = silver_price - general_store,
    gold_gp = gold_price - general_store,
    iridium_gp = iridium_price - general_store,
    # joja profit
    regular_jp = regular_price - jojamart,
    silver_jp = silver_price - jojamart,
    gold_jp = gold_price - jojamart,
    iridium_jp = iridium_price - jojamart,
    ) 
```

```{r}
# yea no....
tester |>
  filter(item == "Blueberry") |>
  ggplot(aes(x = item, y = regular_gp, fill = profession)) +
  geom_bar(stat = "identity")
```

```{r}
# Load the image as a raster
img <- brick("stardewmap.png")  # Replace with your image file path

# Inspect the image dimensions
print(img)

# Extract bounds (xmin, xmax, ymin, ymax)
bounds <- extent(img)
print(bounds)


img <- brick("stardewmap.png")   # Replace with your image path

# Plot the image

```

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE)
```


```{r}
# Load the libraries
library(sf) # Work with polygons
library(tidyverse) # ggplot2 and dplyr 

# Load some predefined court themes for the plot_court() functions
# Code found at https://github.com/olivierchabot17/ballbook
source("code/court_themes.R")

# All lengths will be in meters
line_thick = 0.05
width = 15
height = 28 / 2
key_height = 5.8
key_width = 4.9
key_radius = 1.8
backboard_width = 1.8
# https://www.fiba.basketball/documents/BasketballEquipment.pdf
backboard_thick = 0.1
backboard_offset = 1.2
hoop_radius = 0.45 / 2
hoop_center_y = 1.575
rim_thick = 0.02
neck_length = hoop_center_y - (backboard_offset + hoop_radius + rim_thick)
three_point_radius = 6.75
three_point_side_offset = 0.9
three_point_side_height = sqrt(
  three_point_radius^2 - (three_point_side_offset - width/2)^2
  ) + hoop_center_y
restricted_area_radius = 1.25
```

### Half-Court

Once we have defined a few basic dimensions, we can proceed to create polygons for each of the lines. For now, we will only build a half-court since that's what's needed to create shot charts. However, building the full court would be fairly simple to accomplish using the same approach.

This [vignette](https://cran.r-project.org/web/packages/sf/vignettes/sf1.html) provides a few examples of creating polygons using the ```sf``` package. Recall the coordinate system we defined in Chapter \@ref(shots-data).

The origin was placed at the bottom-left corner of the half-court from our perspective. Note that the $(0, ~0)$ is placed at the __interior__ of the half-court and that all lines are __5 centimeters thick__. Therefore, the interior of the half-court has a base of 15 meters and a height of 14 meters. The exterior of the half-court is 15.1 meters wide and 14.1 meters high as a result of the 0.05 meters width of each line. We chose to define the lines as a polygon within a polygon using the ```st_polygon()``` function to prevent the ambiguity of letting the plotting software decide on the line width. This way, we can be confident that the court appearing on the screen reflects the __true dimensions__.

For convention, we can list the vertices of the polygons starting from the __bottom-left__ and move __clockwise__ from there.



```{r}
line_thick = 0.05
width = 1224
height = 742

# Draw a rectangle that defines the half-court interior
half_court_int <- rbind(
  c(0, 0),
  c(0, ),
  c(width, height),
  c(width, 0),
  c(0,0)
  )

# Draw a rectangle that defines the half-court exterior
half_court_ext <- rbind(
  c(0-line_thick, 0-line_thick),
  c(0-line_thick, height + line_thick),
  c(width + line_thick, height + line_thick),
  c(width + line_thick, 0-line_thick),
  c(0-line_thick, 0-line_thick)
  )

# Define a sfg polygon object in sf by subtracting interior from exterior
half_court <- st_polygon(list(half_court_ext, half_court_int))

# Verify sfg class of polygon
class(half_court)
  
```

```{r}
df <- data.frame(
  x = 612, 
  y = 371, 
  image = "stardewmap.png"  # Replace with your image path
)

# Plot the half-court with the image
ggplot() +
  geom_sf(data = half_court) +
  geom_image(data = df, aes(x, y, image = image), size = 1.496) +
  geom_sf(data = fish_prices_sf, color = "red", size = 4, alpha = .1) 
  # theme(
  #   panel.background =element_blank(),
  #   axis.title.x = element_blank(),
  #   axis.text.x = element_blank(),
  #   axis.ticks.x = element_blank(),
  #   axis.title.y = element_blank(),
  #   axis.text.y = element_blank(),
  #   axis.ticks.y = element_blank())
```

```{r}
xy <- data.frame(
    sub_category = c("The Beach", "River", "Night Market", "Ginger Island", "Mountain Lake", "Secret Woods", "Sewers", "Mutant Bug Lair", "Witch's Swamp", "Crab Pot", "Mines", "Cindersap Forest Pond", "Desert"),
    x = c(850, 850, 800, 1150, 900, 200, 725, 725, 210, 400, 900, 300, 10),
    y = c(120, 300, 100, 50, 550, 400, 260, 260, 305, 390, 610, 300, 710)
  )

fish_prices_sf <- fish_prices |>
  left_join(xy) |>
  filter(!is.na(x)) |>
  mutate(x = ifelse(item == "Angler", 815, x),
         y = ifelse(item == "Angler", 500, y),
         x = ifelse(item == "Ms._Angler", 815, x),
         y = ifelse(item == "Ms._Angler", 500, y),
         x = ifelse(item == "Crimson", 805, x),
         y = ifelse(item == "Crimson", 70, y),
         x = ifelse(item == "Son_of_Crimsonfish", 805, x),
         y = ifelse(item == "Son_of_Crimsonfish", 70, y),
         ) |>  
  st_as_sf(coords = c("x", "y"))
```

```{r}
library(tidyverse)
library(stringr)
library(rvest)
library(polite)
library(sf)
library(maps)
library(viridis)
library(leaflet)
library(htmltools)
library(ggimage)
library(purrr)
library(raster)
library(leaflet)
```

```{r}
line_thick = 0.05
width = 1224
height = 742

# Draw a rectangle that defines the shape of map
map_int <- rbind(
  c(0, 0),
  c(0, height),
  c(width, height),
  c(width, 0),
  c(0,0)
  )

# Draw a rectangle that defines the map exterior
map_ext <- rbind(
  c(0-line_thick, 0-line_thick),
  c(0-line_thick, height + line_thick),
  c(width + line_thick, height + line_thick),
  c(width + line_thick, 0-line_thick),
  c(0-line_thick, 0-line_thick)
  )

# Define a sfg polygon object in sf by subtracting interior from exterior
map_shape <- st_polygon(list(map_ext, map_int))

# Verify sfg class of polygon
class(map_shape)


# Load the image as a raster
img <- brick("data/stardewmap.png")  # Replace with your image file path
# Inspect the image dimensions
print(img)
# Extract bounds (xmin, xmax, ymin, ymax)
bounds <- extent(img)
print(bounds)
# create image map df with center map pixel size
df <- data.frame(
  x = 612, 
  y = 371, 
  image = "data/stardewmap.png"  # Replace with your image path
)

# testing map
ggplot() +
  geom_sf(data = map_shape) +
  geom_image(data = df, aes(x, y, image = image), size = 1.496)
```

```{r}
# get data ready
xy <- data.frame(
    sub_category = c("The Beach", "River", "Night Market", "Ginger Island", "Mountain Lake", "Secret Woods", "Sewers", "Mutant Bug Lair", "Witch's Swamp", "Crab Pot", "Mines", "Cindersap Forest Pond", "Desert"),
    x = c(850, 850, 800, 1150, 900, 200, 725, 725, 210, 400, 900, 300, 10),
    y = c(120, 300, 100, 50, 550, 400, 260, 260, 305, 390, 610, 300, 710)
  )

fish_prices_sf <- fish_prices |>
  left_join(xy) |>
  filter(!is.na(x)) |>
  mutate(x = ifelse(item == "Angler", 815, x),
         y = ifelse(item == "Angler", 500, y),
         x = ifelse(item == "Ms._Angler", 815, x),
         y = ifelse(item == "Ms._Angler", 500, y),
         x = ifelse(item == "Crimson", 805, x),
         y = ifelse(item == "Crimson", 70, y),
         x = ifelse(item == "Son_of_Crimsonfish", 805, x),
         y = ifelse(item == "Son_of_Crimsonfish", 70, y),
         ) |>  
  st_as_sf(coords = c("x", "y"))

write_csv(fish_prices_sf, "data/fish_prices_sf.csv")
```

```{r}
# Plot the half-court with the image
ggplot() +
  geom_sf(data = half_court) +
  geom_image(data = df, aes(x, y, image = image), size = 1.496) +
  geom_sf(data = fish_prices_sf, color = "red", size = 4, alpha = .1) +
  theme(
    panel.background =element_blank(),
    axis.title.x = element_blank(),
    axis.text.x = element_blank(),
    axis.ticks.x = element_blank(),
    axis.title.y = element_blank(),
    axis.text.y = element_blank(),
    axis.ticks.y = element_blank())
```

```{r}
minerals_prices <- read_csv("minerals_prices.csv")
minerals_prices <- minerals_prices |>
  mutate(profession = replace_na(profession, "none"))

write_csv(minerals_prices, "minerals_prices.csv")
```


